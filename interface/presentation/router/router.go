package router

import (
	"fmt"
	"log"
	"net/http"

	// docs is generated by Swag CLI, you have to import it.
	_ "github.com/ishihaya/company-official-app-backend/docs/swagger"
	"github.com/ishihaya/company-official-app-backend/interface/presentation/handler"
	"github.com/ishihaya/company-official-app-backend/interface/presentation/middleware"
	"github.com/ishihaya/company-official-app-backend/pkg/logging"

	"github.com/gin-gonic/gin"
	"github.com/ishihaya/company-official-app-backend/config"
	"github.com/ishihaya/company-official-app-backend/di"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

type Router struct {
	*gin.Engine
}

// New - ルーティング関数の生成
func New() *Router {
	engine := gin.Default()
	gin.SetMode(gin.ReleaseMode)
	return &Router{Engine: engine}
}

// Routes - ルーティングを制御する関数
func (r *Router) Routes() {
	r.GET("/health", healthCheck)
	if !config.IsProduction() {
		r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	}

	authMiddleware := di.InitAuth()
	userHandler := di.InitUser()

	r.Use(authMiddleware.AuthAPI)
	r.Use(middleware.CurrentTime)

	r.GET("/user", userHandler.Get)
	r.POST("/user", userHandler.Create)
}

// RunServer - サーバーを走らせる関数
func (r *Router) RunServer() {
	if err := r.Run(fmt.Sprintf(":%s", config.PORT())); err != nil {
		log.Fatal(err)
	}
}

func healthCheck(c *gin.Context) {
	err := handler.Health()
	if err != nil {
		logging.GetInstance().Errorf("healthCheck error: %+v", err)
		c.JSON(http.StatusInternalServerError, "errrrrrrrrrrrrrr")
		return
	}
	c.JSON(http.StatusOK, "ok")
}
